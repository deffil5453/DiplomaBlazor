@page "/userProfile"
@using DiplomaRealEstate.Models
@using DiplomaRealEstate.Services.UserServices
@using DiplomaRealEstate.InputModel
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserInterface UserServices
@rendermode InteractiveServer
<PageTitle>Профиль пользователя</PageTitle>

<div class="container-fluid py-5">
    <div class="profile-header">
        <img src="/images/@_userProfile.ImageProfile" class="profile-image" alt="Фото профиля">
    </div>
    <div class="profile-content ">
        <div class="row justify-content-center">
            <div class="col-md-5 col-lg-8">
                <h2 class="text-center">@_userProfile.LastName @_userProfile.FirstName @_userProfile.MiddleName</h2>
                <div class="text-center mt-3">
                    <p class="lead">@_userProfile.PhoneNumber</p>
                    <a href="/addendumProfile" class="btn btn-primary">
                        <i class="bi bi-plus-circle-fill">
                            <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                            </svg>
                        </i> Добавить ещё о себе
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
        

    .profile-header {
        position: relative;
        width: 100%;
        height: 50vh; /* Высота шапки с фотографией составит 50% от высоты экрана */
        background: #f4f4f4;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .profile-image {
        max-width: 40%; /* Чтобы изображение масштабировалось с сохранением пропорций */
        max-height: 50vh; /* Максимальная высота изображения - 50% от высоты экрана */
        border-radius: 15%; /* Круглая форма изображения */
        border: 5px solid white; /* Белая рамка вокруг изображения */
        object-fit: cover;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .profile-content {
        background: white;
        margin-top: 1rem; /* Сдвигаем вверх, чтобы фото наложилось на содержимое */
        border-radius: 1rem; /* Скругляем углы содержимого */
    }

    .btn-primary {
        font-size: 1rem;
        padding: 10px 15px; /* Увеличенные отступы для большей кнопки */
        border-radius: 25px; /* Более закругленные углы для кнопки */
        background-color: #007bff;
        border-color: #007bff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

    h2 {
        font-size: 2.5rem; /* Увеличиваем шрифт для фамилии */
        font-weight: bold;
        color: #333;
        margin-bottom: 0.5rem;
    }

    .lead {
        font-size: 1.25rem; /* Увеличиваем шрифт для контактов */
        color: #555;
    }

    i.bi {
        margin-right: 0.5rem;
    }
</style>

@code {
    private User _userProfile = new User();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _userProfile = await UserManager.FindByIdAsync(authState.User.FindFirstValue(ClaimTypes.NameIdentifier));
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!NavigationManager.Uri.Contains("reloaded"))
            {
                var newUri = NavigationManager.GetUriWithQueryParameter("reloaded", "true");
                NavigationManager.NavigateTo(newUri, true);
            }
        }
    }
}