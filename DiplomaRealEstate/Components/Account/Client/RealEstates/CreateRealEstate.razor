@page "/createRealEstate"
@using DiplomaRealEstate.InputModel
@using DiplomaRealEstate.Services.RealEstateServices
@using DiplomaRealEstate.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject IJSRuntime JSRuntime
@inject IRealEstateService RealEstateServices
@inject AuthenticationStateProvider AuthenticationStateProvider
<PageTitle>Создание недвижимости</PageTitle>
@rendermode InteractiveServer
@if (_modalOpen)
{
    <div class="modal fade show @(_modalOpen ? "d-block" : "d-none")" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog modal-dialog-centered @(_isClosing ? "closing" : "")">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Успех</h5>
                    <a @onclick="CloseModal" type="button" class="btn-close btn-danger">
                    </a>
                </div>
                <div class="modal-body">
                    Успешно добавлено!
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}
else
{
    <div class="container py-4">
        <div class="row">
            <div class="col-md-6">
                <h4 class="mb-3">Детали недвижимости</h4>
                <EditForm Model="@_realEstateInputModel" OnValidSubmit="CreateRealEstateValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group mb-3">
                        <label for="Areas">Площадь м²</label>
                        <InputText id="Areas" class="form-control" @bind-Value="_realEstateInputModel.Area" />
                    </div>
                    <div class="form-floating mb-4">
                        <InputNumber id="Prices" class="form-control" @bind-Value="_realEstateInputModel.Price" placeholder="212314" />
                        <label for="Prices">Цена ₽</label>
                    </div>
                    <div class="form-floating mb-4">
                        <InputNumber id="Room" class="form-control" @bind-Value="_realEstateInputModel.Rooms" placeholder="212314" />
                        <label for="Room">Число комнат</label>
                    </div>
                    <div class="form-floating mb-4">
                        <InputText id="Country" class="form-control" @bind-Value="_realEstateInputModel.Country" placeholder="212314" />
                        <label for="Room">Страна</label>
                    </div>
                    <div class="form-floating mb-4">
                        <InputText id="Region" class="form-control" @bind-Value="_realEstateInputModel.Region" placeholder="212314" />
                        <label for="Room">Регион</label>
                    </div>
                    <div class="form-floating mb-4">
                        <InputText id="City" class="form-control" @bind-Value="_realEstateInputModel.City" placeholder="212314" />
                        <label for="Room">Город</label>
                    </div>
                    <div class="form-floating mb-4">
                        <InputText id="Street" class="form-control" @bind-Value="_realEstateInputModel.Street" placeholder="212314" />
                        <label for="Room">Улица</label>
                    </div>
                    <div class="form-floating mb-4">
                        <InputText id="House" class="form-control" @bind-Value="_realEstateInputModel.House" placeholder="212314" />
                        <label for="Room">Номер дома</label>
                    </div>
                    <div class="form-floating mb-4">
                        <InputTextArea id="Description" class="form-control" @bind-Value="_realEstateInputModel.Desctiption" placeholder="Описание" />
                        <label for="Description">Описание</label>
                    </div>
                    <div class="form-group mb-3">
                        <label for="Photos">Фотографии</label>
                        <InputFile id="photos" class="form-control" OnChange="HandleFileSelected" />
                    </div>
                    @if (_typeSales != null)
                    {
                        <div class="form-floating mb-4">
                            <InputSelect id="categories" class="form-control" @bind-Value="_realEstateInputModel.TypeSalesId" placeholder="Тип продажи">
                                <option selected>Тип продажи</option>
                                @foreach (var typeSale in _typeSales)
                                {
                                    <option value="@typeSale.Id">@typeSale.Name</option>
                                }
                            </InputSelect>
                        </div>
                    }
                    @if (_categories != null)
                    {
                        <div class="form-floating mb-4">
                            <InputSelect id="categories" class="form-control" @bind-Value="_realEstateInputModel.CategoryId" placeholder="Категория">
                                <option selected>Категория</option>
                                @foreach (var category in _categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </InputSelect>
                        </div>
                    }
                    @if (_types != null)
                    {
                        <div class="form-floating mb-4">
                            <InputSelect id="types" class="form-control h-100" @bind-Value="_realEstateInputModel.TypeRealEstateId" placeholder="Тип недвижимости">
                                <option selected>Тип недвижимости</option>
                                @foreach (var category in _types)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </InputSelect>
                        </div>
                    }

                    <div class="d-block my-3">
                        <button type="submit" class="btn btn-primary btn-lg btn-block">Создать</button>
                    </div>
                </EditForm>
            </div>
            <div class="col-md-6">
                <h4 class="d-flex justify-content-between align-items-center mb-3">
                    <span class="text-muted">Местоположение на карте</span>
                </h4>
                <div id="map" style="width: 100%; height: 450px;" class="border rounded mb-3"></div>
                <ul class="list-group">
                    <li class="list-group-item d-flex justify-content-between lh-condensed">
                        <div>
                            <h6 class="my-0">Широта:</h6>
                            <small class="text-muted">@_realEstateInputModel.Latitude</small>
                        </div>
                    </li>
                    <li class="list-group-item d-flex justify-content-between lh-condensed">
                        <div>
                            <h6 class="my-0">Долгота:</h6>
                            <small class="text-muted">@_realEstateInputModel.Longitude</small>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
}
@code {
    [SupplyParameterFromForm]
    private RealEstateInputModel _realEstateInputModel { get; set; } = new RealEstateInputModel();
    private List<Category> _categories = new List<Category>();
    private List<TypeSale> _typeSales = new List<TypeSale>();
    private List<TypeRealEstate> _types = new List<TypeRealEstate>();
    private bool _modalOpen { get; set; }
    private bool _isClosing { get; set; }
    protected override async Task OnInitializedAsync()
    {
        _modalOpen = false;
        _categories = await RealEstateServices.GetAllCategoryAsync();
        _typeSales = await RealEstateServices.GetAllTypeSaleAsync();
        _types = await RealEstateServices.GetAllTypeAsync();
    }
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var newFileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
            var path = Path.Combine("wwwroot/images/", newFileName);
            using (var stream = new FileStream(path, FileMode.Create))
            {
                _realEstateInputModel.Photos = newFileName;
                await file.OpenReadStream(1024 * 1024 * 15).CopyToAsync(stream);
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initMap", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task SetCoordinates(string latitude, string longitude)
    {
        _realEstateInputModel.Latitude = latitude;
        _realEstateInputModel.Longitude = longitude;
        await InvokeAsync(StateHasChanged);
    }

    private async Task CreateRealEstateValidSubmit()
    {
        var authUser = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authUser.User;
        if (user.Identity.IsAuthenticated)
        {
            _realEstateInputModel.UserId = user.FindFirst(u => u.Type == ClaimTypes.NameIdentifier).Value;

            await RealEstateServices.AddRealEstateAsync(_realEstateInputModel);
            OpenSuccesModal();
        }
    }
    private void OpenSuccesModal()
    {
        if (!_modalOpen)
        {
            _modalOpen = true;
        }
        _isClosing = false;
    }
    private void CloseModal()
    {
        _modalOpen = false;
        _isClosing = true;
    }
}
<script>
    window.initMap = function (dotNetObjRef) {
        ymaps.ready(function () {
            var myMap = new ymaps.Map('map', {
                center: [55.76, 37.64], // Координаты по умолчанию
                zoom: 9
            });

            var myPlacemark = new ymaps.Placemark([55.76, 37.64], {
                hintContent: 'местоположение метки'
            }, {
                draggable: false
            });

            myMap.geoObjects.add(myPlacemark);

            function setPlacemarkCoords(coords) {
                myPlacemark.geometry.setCoordinates(coords);
                dotNetObjRef.invokeMethodAsync('SetCoordinates', coords[0].toString(), coords[1].toString());
            }

            myPlacemark.events.add('dragend', function (e) {
                var coords = myPlacemark.geometry.getCoordinates();
                setPlacemarkCoords(coords);
            });

            myMap.events.add('click', function (e) {
                var coords = e.get('coords');
                setPlacemarkCoords(coords);
            });
        });
    }
</script>