@page "/createRealEstate"
@using DiplomaRealEstate.InputModel
@using DiplomaRealEstate.Services.RealEstateServices
@using DiplomaRealEstate.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject IRealEstateService RealEstateServices
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer

<EditForm Model="@_realEstateInputModel" OnValidSubmit="CreateRealEstateValidSubmit" FormName="create">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-floating mb-4">
        <InputText id="Areas" class="form-control" @bind-Value="_realEstateInputModel.Area" placeholder="212314" />
        <label for="Areas">Площадь м²</label>
    </div>
    <div class="form-floating mb-4">
        <InputNumber id="Prices" class="form-control" @bind-Value="_realEstateInputModel.Price" placeholder="212314" />
        <label for="Prices">Цена ₽</label>
    </div>
    <div class="form-floating mb-4">
        <InputNumber id="Room" class="form-control" @bind-Value="_realEstateInputModel.Rooms" placeholder="212314" />
        <label for="Room">Число комнат</label>
    </div>
    <div class="form-floating mb-4">
        <InputText id="Country" class="form-control" @bind-Value="_realEstateInputModel.Country" placeholder="212314" />
        <label for="Room">Страна</label>
    </div>
    <div class="form-floating mb-4">
        <InputText id="Region" class="form-control" @bind-Value="_realEstateInputModel.Region" placeholder="212314" />
        <label for="Room">Регион</label>
    </div>
    <div class="form-floating mb-4">
        <InputText id="City" class="form-control" @bind-Value="_realEstateInputModel.City" placeholder="212314" />
        <label for="Room">Город</label>
    </div>
    <div class="form-floating mb-4">
        <InputText id="Street" class="form-control" @bind-Value="_realEstateInputModel.Street" placeholder="212314" />
        <label for="Room">Улица</label>
    </div>
    <div class="form-floating mb-4">
        <InputText id="House" class="form-control" @bind-Value="_realEstateInputModel.House" placeholder="212314" />
        <label for="Room">Номер дома</label>
    </div>

    <InputText id="Latitude" @bind-Value="_realEstateInputModel.Latitude" />
    <InputText id="Longitude" @bind-Value="_realEstateInputModel.Longitude" />
    <div class="form-floating input-group mb-4">
        <InputFile id="photos" class="form-floating" OnChange="HandleFileSelected" />
    </div>
    @if (_categories != null)
    {
        <div class="form-floating mb-4">
            <label for="categories">Категория</label>
            <InputSelect id="categories" class="form-control" @bind-Value="_realEstateInputModel.CategoryId" placeholder="Категория">
                <option selected>Уэээээээ...</option>
                @foreach (var category in _categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>
    }
    @if (_types != null)
    {
        <div class="form-floating mb-4">
            <label for="types">Тип недвижимости</label>
            <InputSelect id="types" class="form-control h-100" @bind-Value="_realEstateInputModel.TypeRealEstateId" placeholder="Тип недвижимости">
                <option selected>Уэээээээ...</option>
                @foreach (var category in _types)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>
    }
    <button type="submit" class="btn btn-outline-primary">Добавить</button>
</EditForm>
@code {


    [SupplyParameterFromForm]
    private RealEstateInputModel _realEstateInputModel { get; set; } = new RealEstateInputModel();
    private List<Category> _categories = new List<Category>();
    private List<TypeRealEstate> _types = new List<TypeRealEstate>();
    protected override async Task OnInitializedAsync()
    {
        _categories = await RealEstateServices.GetAllCategoryAsync();
        _types = await RealEstateServices.GetAllTypeAsync();
    }
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var newFileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
            var path = Path.Combine("wwwroot/images/", newFileName);
            using (var stream = new FileStream(path, FileMode.Create))
            {
                _realEstateInputModel.Photos = newFileName;
                await file.OpenReadStream(1024 * 1024 * 15).CopyToAsync(stream);
            }
        }
    }

    private async Task CreateRealEstateValidSubmit()
    {
        var authUser = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authUser.User;
        if (user.Identity.IsAuthenticated)
        {
            _realEstateInputModel.UserId = user.FindFirst(u => u.Type == ClaimTypes.NameIdentifier).Value;
            await RealEstateServices.AddRealEstateAsync(_realEstateInputModel);
        }
    }
}