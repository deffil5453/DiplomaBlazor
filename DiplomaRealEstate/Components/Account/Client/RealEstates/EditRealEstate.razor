@page "/editRealEstate/{RealEstateId:guid}"
@using DiplomaRealEstate.InputModel
@using DiplomaRealEstate.Models
@using DiplomaRealEstate.Services.RealEstateServices
@inject IJSRuntime JSRuntime
@inject IRealEstateService RealEstateService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<PageTitle>Редактирование недвижимости</PageTitle>
<EditForm Model="@_realEstateModel" OnValidSubmit="UpdateRealEstateValidSubmit" FormName="update">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<h1>Редактирование</h1>
	<div class="form-floating mb-3">
		<InputText id="Areas" class="form-control" @bind-Value="_realEstateModel.Area" placeholder="212314" />
		<label for="Areas">Площадь</label>
	</div>
	<div class="form-floating mb-3">
		<InputNumber id="Prices" class="form-control" @bind-Value="_realEstateModel.Price" placeholder="212314" />
		<label for="Prices">Цена ₽</label>
	</div>
	<div class="form-floating mb-3">
		<InputNumber id="Room" class="form-control" @bind-Value="_realEstateModel.Rooms" placeholder="212314" />
		<label for="Room">Число комнат</label>
	</div>
	<div class="form-floating mb-3">
		<InputTextArea id="Description" class="form-control" @bind-Value="_realEstateModel.Desctiption" placeholder="212314" />
		<label for="Countrys">Описание</label>
	</div>
	<div class="form-floating mb-3">
		<InputText id="Countrys" class="form-control" @bind-Value="_realEstateModel.Country" placeholder="212314" />
		<label for="Countrys">Страна</label>
	</div>
	<div class="form-floating mb-3">
		<InputText id="Regions" class="form-control" @bind-Value="_realEstateModel.Region" placeholder="212314" />
		<label for="Regions">Область</label>
	</div>
	<div class="form-floating mb-3">
		<InputText id="Cities" class="form-control" @bind-Value="_realEstateModel.City" placeholder="212314" />
		<label for="Cities">Город</label>
	</div>
	<div class="form-floating mb-3">
		<InputText id="Streets" class="form-control" @bind-Value="_realEstateModel.Street" placeholder="212314" />
		<label for="Streets">Улица</label>
	</div>
	<div class="form-floating mb-3">
		<InputText id="Houses" class="form-control" @bind-Value="_realEstateModel.House" placeholder="212314" />
		<label for="Houses">Дом</label>
	</div>
	<div id="map" style="width: 100%; height: 400px;" class="mb-3"></div>
	<div class="input-group mb-3">
		<span class="input-group-text">Широта и Долгота</span>
		<InputText id="Latitudes" class="form-control" @bind-Value="_realEstateModel.Latitude" placeholder="212314" />
		<InputText id="Longitudes" class="form-control" @bind-Value="_realEstateModel.Longitude" placeholder="212314" />
	</div>
	<div class="form-floating mb-3">
		<InputFile id="photos" class="form-floating" OnChange="HandleFileSelected" />
	</div>
	@if (_categories != null)
	{
		<div class="form-floating mb-3">
			<InputSelect id="categories" class="form-control" @bind-Value="_realEstateModel.CategoryId" >
				<option selected>Категория</option>
				@foreach (var category in _categories)
				{
					<option value="@category.Id">@category.Name</option>
				}
			</InputSelect>
		</div>
	}
	@if (_types != null)
	{
		<div class="form-floating mb-3">
			<InputSelect id="types" class="form-control" @bind-Value="_realEstateModel.TypeRealEstateId" >
				<option selected>Тип недвижимости</option>
				@foreach (var category in _types)
				{
					<option value="@category.Id">@category.Name</option>
				}
			</InputSelect>
		</div>
	}
	<button type="submit" class="btn btn-outline-success">Сохранить</button>
</EditForm>
@code {
	[SupplyParameterFromForm]
	private RealEstateEditModel _realEstateModel { get; set; } = new RealEstateEditModel();
	[Parameter]
	public Guid RealEstateId { get; set; }
	private List<Category> _categories { get; set; }
	private List<TypeRealEstate> _types { get; set; }

	protected override async Task OnInitializedAsync()
	{
		_categories = await RealEstateService.GetAllCategoryAsync();
		_types = await RealEstateService.GetAllTypeAsync();
		_realEstateModel = await RealEstateService.GetRealEstateAsync(RealEstateId);
	}
	private void HandleFileSelected(InputFileChangeEventArgs e)
	{
		var file = e.File;
		if (file != null)
		{
			_realEstateModel.Photos = file.Name;
		}
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			if (!NavigationManager.Uri.Contains("reloaded"))
			{
				var newUri = NavigationManager.GetUriWithQueryParameter("reloaded", "true");
				NavigationManager.NavigateTo(newUri, true);
			}
			else
			{
				await JSRuntime.InvokeVoidAsync("initMap", DotNetObjectReference.Create(this));
			}
		}
	}

	[JSInvokable]
	public async Task SetCoordinates(string latitude, string longitude)
	{
		_realEstateModel.Latitude = latitude;
		_realEstateModel.Longitude = longitude;
		await InvokeAsync(StateHasChanged);
	}
	[JSInvokable]
	public async Task SetAddressDetails(string country, string province, string city, string street, string house)
	{
		_realEstateModel.Country = country;
		_realEstateModel.Region = province;
		_realEstateModel.City = city;
		_realEstateModel.Street = street;
		_realEstateModel.House = house;
		await InvokeAsync(StateHasChanged);
	}
	private async Task UpdateRealEstateValidSubmit()
	{
		await RealEstateService.UpdateRealEstate(_realEstateModel.Id, _realEstateModel);
	}
}
<script>
	var myPlacemark;
	var myMap;
	initMap = function (dotNetObjRef) {
		ymaps.ready(function () {
			myMap = new ymaps.Map('map', {
				center: [55.76, 37.64], // Координаты по умолчанию
				zoom: 9
			});

			myPlacemark = new ymaps.Placemark([55.76, 37.64], {
				hintContent: 'местоположение метки'
			}, {
				draggable: false
			});

			myMap.geoObjects.add(myPlacemark);

			function setPlacemarkCoords(coords) {
				myPlacemark.geometry.setCoordinates(coords);
				dotNetObjRef.invokeMethodAsync('SetCoordinates', coords[0].toString(), coords[1].toString());
				getAddress(coords);
			}
			function getAddress(coords) {
				ymaps.geocode(coords, { results: 1 }).then(function (res) {
					var firstObject = res.geoObjects.get(0);
					var components = firstObject.properties.get('metaDataProperty.GeocoderMetaData.Address.Components');
					var country, province, region, city, street, house;

					components.forEach(function (component) {
						switch (component.kind) {
							case 'country':
								country = component.name;
								break;
							case 'province':
								province = component.name; // Иногда регион может быть также значением province
								break;
							case 'area':
								region = component.name;
								break;
							// В зависимости от страны и региона, город может быть значением locality или area
							case 'locality':
								city = component.name;
								break;
							case 'street':
								street = component.name;
								break;
							case 'house':
								house = component.name;
								break;
						}
					});

					dotNetObjRef.invokeMethodAsync('SetAddressDetails', country, province || region, city, street, house);
				});
			}

			myPlacemark.events.add('dragend', function (e) {
				var coords = myPlacemark.geometry.getCoordinates();
				setPlacemarkCoords(coords);
			});

			myMap.events.add('click', function (e) {
				var coords = e.get('coords');
				setPlacemarkCoords(coords);
			});
			myMap.controls.remove("trafficControl");
			myMap.controls.remove("searchControl");
			myMap.controls.remove("geolocationControl");
			myMap.controls.remove("rulerControl");
		});

	}

</script>