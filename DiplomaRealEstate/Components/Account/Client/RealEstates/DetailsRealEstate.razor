@page "/detailsRealEstate/{RealEstateId:guid}"
@using DiplomaRealEstate.InputModel
@using DiplomaRealEstate.Models
@using DiplomaRealEstate.Services.RealEstateServices
@using DiplomaRealEstate.Services.UserServices
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject IJSRuntime JSRuntime
@inject IUserInterface UserServices
@inject NavigationManager NavigationManager
@inject IRealEstateService RealEstateService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
<PageTitle>Данные о недвижимости</PageTitle>
<div class="container mt-5">
    <div class="row">
        <div class="col-lg-8">
            <h2 class="mb-3">Информация о недвижимости</h2>
            <div class="card mt-3">
                <div class="real-estate-image">
                    <img src="/images/@_realEstateModel.Photos" style="width:400px;height: 400px;" />
                </div>
                <div class="card-body">
                    <p class="card-text"><strong>Регион:</strong> @_realEstateModel.Region</p>
                    <p class="card-text"><strong>Город:</strong> @_realEstateModel.City</p>
                    <p class="card-text"><strong>Улица и номер дома:</strong> @_realEstateModel.Street, @_realEstateModel.House</p>
                    <p class="card-text"><strong>Описание:</strong> @_realEstateModel.Desctiption</p>
                    <p class="card-text">
                        <strong>Категория: </strong>
                        @{
                            var category = _categories?.FirstOrDefault(c => c.Id == _realEstateModel.CategoryId);
                        }
                        @if (category != null)
                        {
                            @category.Name
                        }
                        else
                        {
                            <em>Категория не назначена</em>
                        }
                    </p>
                    <p class="card-text">
                        <strong>Тип недвижимости: </strong>
                        @{
                            var type = _types?.FirstOrDefault(t => t.Id == _realEstateModel.TypeRealEstateId);
                        }
                        @if (type != null)
                        {
                            @type.Name
                        }
                        else
                        {
                            <em>Тип не назначен</em>
                        }
                    </p>

                    <h4>Данные продавца </h4>
                    <p><b>ФИО:</b> @_seller.LastName @_seller.FirstName @_seller.MiddleName</p>
                    <a href="@CreateMapLink()" class="btn btn-lg btn-info" target="_blank">Смотреть на карте</a>
                </div>
            </div>
        </div>  
        
    </div>
</div>

@code {
    private RealEstateEditModel _realEstateModel { get; set; } = new RealEstateEditModel();
    [Parameter]
    public Guid RealEstateId { get; set; }
    private string? _userId;
    private User _seller { get; set; } = new User();
    private List<Category> _categories { get; set; }
    private List<TypeRealEstate> _types { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = user.FindFirst(u => u.Type == ClaimTypes.NameIdentifier).Value;
        _categories = await RealEstateService.GetAllCategoryAsync();
        _types = await RealEstateService.GetAllTypeAsync();
        _realEstateModel = await RealEstateService.GetRealEstateAsync(RealEstateId);
        _seller = await UserServices.GetUserAsync(_realEstateModel.UserId);
    }
    private string CreateMapLink()
    {
        var addressText = $"{_realEstateModel.Country}, {_realEstateModel.Region}, {_realEstateModel.City}, " +
                          $"{_realEstateModel.Street}, {_realEstateModel.House}";
        var encodedAddress = Uri.EscapeDataString(addressText);
        return $"https://yandex.ru/maps/?text={encodedAddress}&z=16&l=map";
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!NavigationManager.Uri.Contains("reloaded"))
            {
                var newUri = NavigationManager.GetUriWithQueryParameter("reloaded", "true");
                NavigationManager.NavigateTo(newUri, true);
            }
            else
            {

                await JSRuntime.InvokeVoidAsync("initMap", _realEstateModel.Latitude, _realEstateModel.Longitude);
            }
        }
    }
}
<script>
    window.initMap = function (lat, lon) { // Добавьте параметры lon и lat
        if (!window.ymaps) {
            alert('ymaps не загружен');
            return;
        }
        ymaps.ready(function () {
            var center = [parseFloat(lat), parseFloat(lon)]; // Убедитесь, что координаты представлены в виде чисел
            myMap = new ymaps.Map('map', {
                center: [lat, lon], // Координаты по умолчанию
                zoom: 9
            });

            var myPlacemark = new ymaps.Placemark(center, { // И здесь тоже используйте координаты center
                hintContent: 'местоположение метки'
            }, {
                preset: 'islands#redDotIcon', // Используйте необходимый стиль для метки
                draggable: false
            });

            myMap.geoObjects.add(myPlacemark);
            function reloadPage() {
                window.location.reload();
            }
            myMap.controls.remove("trafficControl");
            myMap.controls.remove("searchControl");
            myMap.controls.remove("geolocationControl");
            myMap.controls.remove("rulerControl");
        });
    }
</script>