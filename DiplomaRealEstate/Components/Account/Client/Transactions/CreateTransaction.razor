@page "/createTransaction/{RealEstateId:guid}"
@using DiplomaRealEstate.InputModel
@using DiplomaRealEstate.Models
@using DiplomaRealEstate.Services.FavoriteServices
@using DiplomaRealEstate.Services.RealEstateServices
@using DiplomaRealEstate.Services.TransactionServices
@using DiplomaRealEstate.Services.UserServices
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITransactionService TransactionService
@inject IRealEstateService RealEstateService
@inject IUserInterface UserServices
@inject IFavoriteService FavoriteService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<PageTitle>Создание сделки</PageTitle>
@if (_modalOpen)
{
    <div class="@ModalClass" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Успех</h5>
                    <a @onclick="CloseModal" type="button" class="btn-close btn-danger">
                    </a>
                </div>
                <div class="modal-body">
                    Оплата прошла успешно!
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}
else
{
    <div class="container my-5 transaction-container">
        <div class="row">
            <div class="col-lg-8">
                <div class="card mt-3 transaction-card">
                    <img src="/images/@_realEstateModel.Photos" class="card-img-top img-fluid" alt="Фото недвижимости" />
                    <div class="card-body">
                        <p class="card-text"><strong>Регион:</strong> @_realEstateModel.Region</p>
                        <p class="card-text"><strong>Город:</strong> @_realEstateModel.City</p>
                        @if (!string.IsNullOrWhiteSpace(_realEstateModel.Street))
                        {
                            <p class="card-text"><strong>Улица и номер дома:</strong> @_realEstateModel.Street, @_realEstateModel.House</p>
                        }
                        @if (_realEstateModel.Price > 0)
                        {
                            <p class="card-text"><strong>Цена:</strong> @_realEstateModel.Price ₽</p>
                        }
                    </div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="card mt-3 transaction-card">
                    <div class="card-body">
                        <h4>Данные продавца</h4>
                        <p><strong>ФИО:</strong> @_seller.LastName @_seller.FirstName @_seller.MiddleName</p>
                    </div>
                </div>
                <div class="card mt-3 transaction-card">
                    <div class="card-body">
                        <h4>Данные покупателя</h4>
                        <p><strong>ФИО:</strong> @_customer.LastName @_customer.FirstName @_customer.MiddleName</p>
                    </div>
                </div>
                <button class="btn btn-lg btn-success mt-3 pay-btn" @onclick="()=>CompleteTransaction(_realEstateModel.Id)">
                    <span>Оплатить</span>
                </button>
                <button class="btn btn-lg btn-primary mt-3" @onclick="() => CreateMapLink()">
                    Смотреть на карте
                </button>
            </div>
        </div>
    </div>
}

<style>
    .modal-open {
    animation: fadeIn 0.5s;
}

.modal-close {
    animation: fadeOut 0.5s forwards; /* forwards позволяет анимации остановиться в конечном состоянии */
}

.backdrop-open {
    animation: fadeInBackdrop 0.5s;
}

    .pay-btn {
        position: relative;
        overflow: hidden;
        transition: color 0.4s ease-in-out;
    }

        .pay-btn::after {
            content: "";
            background: #218838;
            display: block;
            position: absolute;
            width: 100%;
            height: 0;
            top: 0;
            left: 0;
            z-index: 0;
            transition: height 0.3s ease-in-out;
        }

        .pay-btn:hover::after {
            height: 100%;
        }

        .pay-btn span {
            position: relative;
            z-index: 1;
        }

    .transaction-container .transaction-card {
        border: none;
        border-radius: 0.5rem;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        overflow: hidden; /* Обрезаем содержимое по границам карточки */
    }

    .transaction-card img {
        object-fit: cover;
        width: 100%;
        height: auto; /* Позволяет картинке быть респонсив без жесткого указания высоты */
        border-top-left-radius: 0.5rem;
        border-top-right-radius: 0.5rem; /* Скругляем только верхние углы изображения */
    }

    .transaction-card .card-body {
        padding: 1.5rem; /* Увеличенный внутренний отступ для контента карточки */
        background-color: #fff; /* Чистый белый фон для контента */
    }

        .transaction-card .card-body h4 {
            font-size: 1.25rem; /* Увеличиваем размер шрифта для подзаголовков */
            color: #333; /* Темный цвет текста для улучшенной читаемости */
            margin-bottom: 1rem; /* Добавляем отступ от заголовка до текста */
        }

        .transaction-card .card-body p {
            font-size: 1rem; /* Размер шрифта для параграфов */
            color: #6c757d; /* Светло-серый цвет текста */
            margin-bottom: 0.5rem; /* Расстояние между параграфами */
        }

    .pay-btn {
        font-weight: bold; /* Жирное начертание текста */
        color: #fff; /* Белый текст */
        background-color: #28a745; /* Зеленый цвет кнопки */
        border-color: #28a745; /* Зеленый цвет границы */
    }

        .pay-btn:hover {
            background-color: #218838; /* Затемненный зеленый при наведении */
            border-color: #1e7e34; /* Затемненный зеленый цвет границы при наведении */
        }
</style>
@code {
    [Parameter]
    public Guid RealEstateId { get; set; }
    private bool IsProcessingPayment = false;
    private User _seller { get; set; } = new User();
    private User _customer { get; set; } = new User();
    private string _userId;
    private bool _modalOpen { get; set; }
    private bool _isClosing { get; set; }
    private string ModalClass => _modalOpen ? "modal fade show d-block modal-open" : "modal fade modal-close";
    private string BackdropClass => _modalOpen ? "modal-backdrop show backdrop-open" : "d-none";

    private RealEstateEditModel _realEstateModel { get; set; } = new RealEstateEditModel();
    protected override async Task OnInitializedAsync()
    { 
        _modalOpen = false;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = user.FindFirst(u => u.Type == ClaimTypes.NameIdentifier).Value;
        _realEstateModel = await RealEstateService.GetRealEstateAsync(RealEstateId);
        _seller = await UserServices.GetUserAsync(_realEstateModel.UserId);
        _customer = await UserServices.GetUserAsync(_userId);
    }
    private async Task CompleteTransaction(Guid id)
    {
        bool isFavorite = await FavoriteService.GetFavoriteByUserAsync(_userId, id);
        if (!isFavorite)
        {
            await FavoriteService.AddFavoriteAsync(_userId, id);
        }
        await FavoriteService.RemoveFavoriteAsync(_userId, id);
        await RealEstateService.RemoveRealEstateAsync(id);
        OpenPayModal();
        await Task.Delay(500);
    }
    private void OpenPayModal()
    {
        _modalOpen = true;
        _isClosing = false;
    }
    private void CloseModal()
    {
        _isClosing = true; // Инициирует анимацию закрытия.

        // Задержка для анимации закрытия перед сменой состояния _modalOpen
        var animationTime = 500;
        Task.Delay(animationTime).ContinueWith(_ =>
        {
            _modalOpen = false;
            InvokeAsync(StateHasChanged); // Перерисовывать компонент после асинхронной операции
        });
    }
    private string CreateMapLink()
    {
        var addressText = $"{_realEstateModel.Country}, {_realEstateModel.Region}, {_realEstateModel.City}, " +
                          $"{_realEstateModel.Street}, {_realEstateModel.House}";
        var encodedAddress = Uri.EscapeDataString(addressText);
        return $"https://yandex.ru/maps/?text={encodedAddress}&z=16&l=map";
    }
}
