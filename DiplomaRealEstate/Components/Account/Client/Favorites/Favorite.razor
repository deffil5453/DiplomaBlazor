@page "/favorite"
@using DiplomaRealEstate.Models
@using DiplomaRealEstate.Services.FavoriteServices
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IFavoriteService FavoriteService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<PageTitle>Избранное</PageTitle>

<div class="container my-5">
    <h2 class="text-center mb-5">Избранное</h2>
    @if (_favorites.Count == 0)
    {
        <div class="alert alert-info text-center" role="alert">
            <strong>У вас пока нет избранного.</strong>
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var item in _favorites)
            {
                <div class="col-md-6 col-lg-4">
                    <div class="card favorite-card shadow-sm">
                        <img src="@($"/images/{item.RealEstate.Photos}")" style="object-fit: cover; height: 200px;width:400px;height: 400px;" class="card-img-top" alt="Фото недвижимости">
                        <div class="card-body d-flex flex-column">
                            <p class="card-text"><b>Регион: @item.RealEstate.Region, Город: @item.RealEstate.City</b></p>
                            <p class="card-text"> Улица: @item.RealEstate.Street @item.RealEstate.House</p>
                            <p class="card-text price-text"><b>Цена:</b> @item.RealEstate.Price ₽</p>
                            <div class="mt-auto">
                                <button class="btn buy-btn me-2" @onclick="() => CreateTransaction(item.RealEstate.Id)">оформить покупку</button>
                                <button class="btn btn-outline-danger" @onclick="() => RemoveFavorite(item.RealEstateId)">Удалить</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    .favorite-card {
        transition: transform .2s, box-shadow .2s;
        height: 100%;
    }

        .favorite-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 0 15px rgba(0,0,0,0.1);
        }

    .card-img-top {
        height: 200px;
        object-fit: cover;
    }

    .price-text {
        font-weight: bold;
        color: #007bff;
    }

    .buy-btn {
        background-color: #28a745;
        color: white;
    }

        .buy-btn:hover {
            background-color: #218838;
        }

    .btn-outline-danger {
        color: #dc3545;
        border-color: #dc3545;
    }

        .btn-outline-danger:hover {
            color: white;
            background-color: #dc3545;
        }
</style>
@code {
    private List<FavoriteRealEstate> _favorites = new List<FavoriteRealEstate>();
    private string _userId;
    protected override async Task OnInitializedAsync()
    {
        var authUser = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _userId = authUser.User.FindFirst(u => u.Type == ClaimTypes.NameIdentifier).Value;
        _favorites = await FavoriteService.GetAllCartItemForUserAsync(_userId);
    }
    private async Task RemoveFavorite(Guid productId)
    {   
        bool success = await FavoriteService.RemoveFavoriteAsync(_userId, productId);
        if (success)
        {
            _favorites = await FavoriteService.GetAllCartItemForUserAsync(_userId);
        }
    }
    private async Task CreateTransaction(Guid productId)
    {
        bool success = await FavoriteService.RemoveFavoriteAsync(_userId, productId);
        if (success)
        {
            NavigationManager.NavigateTo($"createTransaction/{productId}");
        }
    }
}