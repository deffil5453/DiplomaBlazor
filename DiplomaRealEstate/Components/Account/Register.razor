@page "/register"
@using System.ComponentModel.DataAnnotations
@using DiplomaRealEstate.Models
@using Microsoft.AspNetCore.Identity
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager
@inject RoleManager<IdentityRole> RoleManager
<PageTitle>Регистрация</PageTitle>
@if (_modalOpen)
{
    <div class="modal fade show @fadeshow" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog modal-dialog-centered @modalDiaolg">
            <div class="modal-content">
                <div class="modal-header justify-content-between">
                    <span class="modal-title h5" style="width: 35%;" /> <!-- Заглушка для центровки -->
                    <h5 class="modal-title w-60 text-center">РЕГИСТРАЦИЯ</h5>
                    <a href="/" class="btn-close" aria-label="Close"></a> <!-- Используйте JavaScript для закрытия или добавьте соответствующий обработчик -->
                </div>
                @if (_registrationSuccess)
                {
                    <div class="modal-body">
                        <h2>Регистрация завершена</h2>
                        <a>Нажмите чтобы начать авторизацию для входа</a>
                        <a href="login" type="submit" class="btn btn-gradient w-100">авторизоваться</a>
                    </div>
                }
                else
                {
                    <div class="modal-body">
                        <EditForm Model="@_registerModel" OnValidSubmit="HandleRegistration" FormName="register">
                            <DataAnnotationsValidator />

                            <div class="form-group mb-3">
                                <label for="username">Логин</label>
                                <InputText @bind-Value="@_registerModel.Username" class="form-control" id="username" />
                                <ValidationMessage For="@(() => _registerModel.Username)" />
                            </div>

                            <div class="form-group mb-3">
                                <label for="password">Пароль</label>
                                <InputText @bind-Value="@_registerModel.Password" type="password" class="form-control" id="password" />
                                <ValidationMessage For="@(() => _registerModel.Password)" />
                            </div>
                            <button type="submit" class="btn btn-gradient w-100">Зарегистрироваться</button>
                        </EditForm>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}
<style>
    .modal-header .modal-title {
        font-family: 'Open Sans', sans-serif;
        /* другие стили... */
    }

    .modal-content {
        font-family: 'Open Sans', sans-serif;
        /* Применяем сплошной цвет фона, который будет хорошо выглядеть с белым текстом */
        background-color: #f8f9fa; /* светлый фон для модального окна */
    }

    .modal-header {
        /* Тут можно указать желаемые стили для заголовка модального окна, например: */
        background-image: linear-gradient(-135deg, #c850c0, #4158d0);
        color: #ffffff; /* Белый цвет текста */
        border-bottom: 1px solid #ddd; /* линия под заголовком для визуального разделения */
    }

    .btn-gradient {
        font-family: 'Open Sans', sans-serif;
        background-image: linear-gradient(-135deg, #c850c0, #4158d0);
        color: #ffffff; /* Белый цвет текста */
        border: none; /* Убрать рамку */
        border-radius: .25rem; /* Скругленные углы */
        padding: .5rem 1rem; /* Внутренние отступы */
        font-size: 1rem; /* Размер шрифта */
        line-height: 1.5; /* Высота строки */
        transition: background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out; /* Плавная анимация при наведении */
    }

        .btn-gradient:hover {
            opacity: 0.85; /* Слегка уменьшить яркость при наведении */
            color: #ffffff; /* Удерживает белый цвет текста при наведении */
        }

    /* При желании можно добавить стандартные стили для текста сообщений об ошибке и других элементов */
</style>
@code {
    [SupplyParameterFromForm]
    private RegisterModel _registerModel { get; set; } = new();
    private bool _registrationSuccess = false;
    private bool _modalOpen { get; set; }
    private string fadeshow = "d-none";
    private string modalDiaolg = "closing";
    private async Task HandleRegistration()
    {
        User userAdd = new User { UserName = _registerModel.Username };
        string roleName = "User";
        if (_registerModel.Username == "nozdrin")
        {
            roleName = "Admin";
        }
        bool roleExsist = await RoleManager.RoleExistsAsync(roleName);
        if (!roleExsist)
        {
            IdentityRole role = new IdentityRole(roleName);
            await RoleManager.CreateAsync(role);
        }
        var result = await UserManager.CreateAsync(userAdd, _registerModel.Password);

        if (result.Succeeded)
        {
            _registrationSuccess = true;
            await UserManager.AddToRoleAsync(userAdd, roleName);
            // StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        OpenRegistrationModal();
    }
    private void OpenRegistrationModal()
    {
        if (!_modalOpen)
        {
            _modalOpen = true;
        }
        fadeshow = "d-block";
        modalDiaolg = "";
    }
    public class RegisterModel
    {
        [Required(ErrorMessage = "Введите логин!")]
        [MinLength(4, ErrorMessage = "Логин должен содержать минимум 4 символа.")]
        [MaxLength(20, ErrorMessage = "Логин не должен превышать 20 символов.")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Введите пароль!")]
        [MinLength(6, ErrorMessage = "Пароль должен содержать минимум 6 символов.")]
        [MaxLength(100, ErrorMessage = "Пароль не должен превышать 100 символов.")]
        public string Password { get; set; }
    }
}