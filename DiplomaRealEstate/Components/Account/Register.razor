@page "/register"
@using System.ComponentModel.DataAnnotations
@using DiplomaRealEstate.Models
@using Microsoft.AspNetCore.Identity
@rendermode InteractiveServer
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager
@inject RoleManager<IdentityRole> RoleManager
@if (_modalUeeeeee)
{
    <div class="modal fade show @(_modalUeeeeee ? "d-block" : "d-none")" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog modal-dialog-centered @(_isClosing ? "closing" : "")">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Регистрация</h5>
                    <button type="button" @onclick="()=>CloseRegistrationModal()" class="btn-close btn-danger">
                    </button>
                </div>
                @if (_registrationSuccess)
                {
                    <div class="modal-body">
                        <h2>Регистрация успешно завершена!</h2>
                        <a>Нажмите чтобы начать авторизацию для входа</a>
                        <a href="login" type="submit" class="btn btn-success w-100">авторизоваться</a>
                    </div>
                }
                else
                {
                    <div class="modal-body">
                        <EditForm Model="@_registerModel" OnValidSubmit="HandleRegistration" FormName="register">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="mb-3">
                                <InputText @bind-Value="_registerModel.Username" class="form-control" id="username" placeholder=" " autocomplete="off" />
                                <label for="username">Логин</label>
                            </div>
                            <div class="mb-3">
                                <InputText type="password" @bind-Value="@_registerModel.Password" class="form-control" id="password" placeholder=" " autocomplete="new-password" />
                                <label for="password">Пароль</label>
                            </div>
                            <button type="submit" class="btn btn-success w-100">Зарегистрироваться</button>
                        </EditForm>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="modal-backdrop show" @onclick="()=>CloseRegistrationModal()"></div>
}
else
{
    <button @onclick="()=>OpenRegistrationModal()">начать регистрацию</button>
}
@code {
    [SupplyParameterFromForm]
    private RegisterModel _registerModel { get; set; } = new();
    private bool _registrationSuccess = false;
    private string _redirectTo;
    private bool _modalUeeeeee { get; set; }
    private bool _isClosing { get; set; }
    private async Task HandleRegistration()
    {
        User userAdd = new User { UserName = _registerModel.Username };
        string roleName = "User";
        if (_registerModel.Username == "nozdrin")
        {
            roleName = "Admin";
        }
        bool roleExsist = await RoleManager.RoleExistsAsync(roleName);
        if (!roleExsist)
        {
            IdentityRole role = new IdentityRole(roleName);
            await RoleManager.CreateAsync(role);
        }
        var result = await UserManager.CreateAsync(userAdd, _registerModel.Password);

        if (result.Succeeded)
        {
            _registrationSuccess = true;
            await UserManager.AddToRoleAsync(userAdd, roleName);
            // await CloseRegistrationModal();
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        OpenRegistrationModal();
    }
    private async Task CloseRegistrationModal()
    {
        _isClosing = true;

        // Длительность анимации
        await Task.Delay(400);
        _modalUeeeeee = false;
        _isClosing = false;
    }
    private void OpenRegistrationModal()
    {
        if (!_modalUeeeeee)
        {
            _modalUeeeeee = true;
        }
        _isClosing = false;
    }
    public class RegisterModel
    {
        [Required(ErrorMessage = "Введите логин!")]
        public string Username { get; set; }
        [Required(ErrorMessage = "Введите пароль!")]
        [DataType(DataType.Password)]
        public string Password { get; set; }
    }
}