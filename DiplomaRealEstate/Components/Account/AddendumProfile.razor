@page "/addendumProfile"
@using DiplomaRealEstate.Models
@using DiplomaRealEstate.Services.UserServices
@using DiplomaRealEstate.InputModel
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserInterface UserServices
@rendermode InteractiveServer
<PageTitle>Обновление профиля</PageTitle>


@if (_modalOpen)
{
    <div class="modal fade show @(_modalOpen ? "d-block" : "d-none")" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog modal-dialog-centered @(_isClosing ? "closing" : "")">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Обновление профиля</h5>
                    <a href="userProfile" type="" class="btn-close btn-danger">
                    </a>
                </div>
                @if (_registrationSuccess)
                {
                    <div class="modal-body">
                        <h2>Обновление завершено!</h2>

                    </div>
                }
                else
                {
                    <div class="modal-body">
                        <EditForm Model="@_userDetail" OnValidSubmit="HandleUpdateProfile" FormName="UserDetailModel">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group mb-3">
                                <label for="LastName">Фамилия:</label>
                                <InputText id="LastName" class="form-control" @bind-Value="@_userDetail.LastName" />
                            </div>
                            <div class="form-group mb-3">
                                <label for="FirstName">Имя:</label>
                                <InputText id="FirstName" class="form-control" @bind-Value="@_userDetail.FirstName" />
                            </div>
                            <div class="form-group mb-3">
                                <label for="MiddleName">Отчество:</label>
                                <InputText id="MiddleName" class="form-control" @bind-Value="@_userDetail.MiddleName" />
                            </div>


                            <div class="form-group mb-3">
                                <label for="PhoneNumber">Номер телефона:</label>
                                <InputText id="PhoneNumber" class="form-control" @bind-Value="@_userDetail.PhoneNumber" />
                            </div>
                            <div class="form-group mb-3">
                                <label for="Photos">Фотографии</label>
                                <InputFile id="photos" class="form-control" OnChange="HandleFileSelected" />
                            </div>
                            <button type="submit" class="btn btn-primary">Обновить</button>
                        </EditForm>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="modal-backdrop show"></div>
}

@code {
    [SupplyParameterFromForm]
    private User _userDetail { get; set; } = new User();
    private bool _modalOpen { get; set; }
    private bool _isClosing { get; set; }
    private string _userId;
    private bool _registrationSuccess = false;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = user.FindFirst(u => u.Type == ClaimTypes.NameIdentifier).Value;
        _userDetail = await UserServices.GetUserAsync(_userId);
        OpenRegistrationModal();
    }
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var newFileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
            var path = Path.Combine("wwwroot/images/", newFileName);
            using (var stream = new FileStream(path, FileMode.Create))
            {
                _userDetail.ImageProfile = newFileName;
                await file.OpenReadStream(1024 * 1024 * 15).CopyToAsync(stream);
            }
        }
    }
    private void OpenRegistrationModal()
    {
        if (!_modalOpen)
        {
            _modalOpen = true;
        }
        _isClosing = false;
    }

    private async Task HandleUpdateProfile()
    {
        await UserServices.UptateUser(_userId, _userDetail);
        _registrationSuccess = true;
        StateHasChanged();
    }
}