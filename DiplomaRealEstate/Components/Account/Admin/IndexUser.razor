@page "/indexUser"
@using DiplomaRealEstate.Models
@using DiplomaRealEstate.Services.UserServices
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject IUserInterface UserServices
@inject AuthenticationStateProvider AutenticationStateProvider
@rendermode InteractiveServer
<h3 class="text-center my-5 page-title">Пользователи</h3>

<div class="container py-5">
    <div class="row justify-content-center">
        @foreach (var item in _userAll)
        {
            <div class="col-md-10 col-lg-8 mb-4">
                <div class="user-card card shadow">
                    <div class="row g-0">
                        <div class="col-md-4 d-flex align-items-center justify-content-center p-3">
                            <img src="/images/@(string.IsNullOrEmpty(item.ImageProfile) ? "default-profile.png" : item.ImageProfile)" class="img-fluid rounded-start" alt="Фото профиля">
                        </div>
                        <div class="col-md-8">
                            <div class="card-body">
                                <h4 class="card-title">@item.FirstName @item.MiddleName @item.LastName</h4>
                                <p class="card-text"><i class="bi bi-phone-fill"></i> @item.PhoneNumber</p>
                                @if (item.UserName != "nozdrin")
                                {
                                    <button @onclick="() => DeleteUser(item.Id)" class="btn btn-danger">Удалить</button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .img-fluid {
        width: 100%;
        height: 100%;
        border-top-left-radius: 15px;
        border-bottom-left-radius: 15px;
    }       
    .page-title {
        font-size: 2rem;
        color: #333;
    }

    .user-card {
        transition: all 0.3s ease-in-out;
        border-radius: 0.5rem;
        overflow: hidden;
    }

        .user-card:hover {
            box-shadow: 0 0 20px rgba(0,0,0,0.15);
        }

        .user-card img {
            object-fit: cover;
            width: 100px;
            height: 100px;
        }

    .card-body {
        padding: 2rem;
        background-color: #fff;
        position: relative;
    }

        .card-body::before {
            content: '';
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            width: 5px;
            background-color: #007bff; /* Primary color strip */
            border-top-left-radius: 0.5rem;
            border-bottom-left-radius: 0.5rem;
        }

    .card-title {
        font-size: 1.5rem;
        margin-bottom: .25rem;
    }

    .card-text {
        font-size: 1rem;
        margin-bottom: .5rem;
    }

    .btn-danger {
        margin-right: .5rem;
    }

    .btn-secondary {
        background-color: #6c757d;
        border-color: #6c757d;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
            border-color: #545b62;
        }

    i.bi {
        margin-right: 0.5rem;
        font-size: 1.2rem;
    }
</style>

@code {
    private List<User> _userAll = new List<User>();
    private bool _isAuthenticated;
    private string _userId;
    protected override async Task OnInitializedAsync()
    {
        _userAll = await UserServices.GetAllUserAsync();
        var authState = await AutenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        // Проверяем, что пользователь аутентифицирован
        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);

            _userId = userIdClaim?.Value;
        }
    }

    private async Task DeleteUser(string id)
    {
        await UserServices.DeleteUser(id);
        _userAll = await UserServices.GetAllUserAsync();
    }
}